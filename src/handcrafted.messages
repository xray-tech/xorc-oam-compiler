prog: FFC WILDCARD 
##
## Ends in an error in state: 193.
##
## expr -> FFC . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## FFC 
##

Ill-formed FFC call. Expected form is `description`(arg1, arg2, ..., argX)

prog: IF TRUE THEN TRUE ELSE TRUE WILDCARD 
##
## Ends in an error in state: 279.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> IF expr THEN expr ELSE expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF TRUE THEN TRUE ELSE WILDCARD 
##
## Ends in an error in state: 278.
##
## expr -> IF expr THEN expr ELSE . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF TRUE THEN TRUE WILDCARD 
##
## Ends in an error in state: 277.
##
## expr -> expr . DOT IDENT [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> IF expr THEN expr . ELSE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ ELSE DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF TRUE THEN WILDCARD 
##
## Ends in an error in state: 276.
##
## expr -> IF expr THEN . expr ELSE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF TRUE WILDCARD 
##
## Ends in an error in state: 275.
##
## expr -> expr . DOT IDENT [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> IF expr . THEN expr ELSE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ TOVERRIDE THEN SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF WILDCARD 
##
## Ends in an error in state: 191.
##
## expr -> IF . expr THEN expr ELSE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INCLUDE STRING NUMBER_SIGN COMMA 
##
## Ends in an error in state: 217.
##
## expr -> decl option(NUMBER_SIGN) . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## decl option(NUMBER_SIGN) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INCLUDE STRING TRUE WILDCARD 
##
## Ends in an error in state: 218.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> decl option(NUMBER_SIGN) expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## decl option(NUMBER_SIGN) expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INCLUDE STRING WILDCARD 
##
## Ends in an error in state: 215.
##
## expr -> decl . option(NUMBER_SIGN) expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## decl 
##

Ill-formed declaration.
At this point, one of the following is expected:
  '#' followed with an expression; or
  an expression

prog: LAMBDA LEFT_BRACK IDENT COMMA WILDCARD 
##
## Ends in an error in state: 30.
##
## separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA . separated_nonempty_list(COMMA,IDENT) [ RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_BRACK IDENT RIGHT_BRACK WILDCARD 
##
## Ends in an error in state: 174.
##
## expr -> LAMBDA option(type_params) . params option(return_type) EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_BRACK IDENT WILDCARD 
##
## Ends in an error in state: 29.
##
## separated_nonempty_list(COMMA,IDENT) -> IDENT . [ RIGHT_BRACK ]
## separated_nonempty_list(COMMA,IDENT) -> IDENT . COMMA separated_nonempty_list(COMMA,IDENT) [ RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_BRACK WILDCARD 
##
## Ends in an error in state: 28.
##
## type_params -> LEFT_BRACK . separated_nonempty_list(COMMA,IDENT) RIGHT_BRACK [ LEFT_PAREN EQ ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_PAREN RIGHT_PAREN DOUBLE_COLON IDENT VAL 
##
## Ends in an error in state: 182.
##
## expr -> LAMBDA option(type_params) params option(return_type) . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) params option(return_type) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> IDENT 
## In state 180, spurious reduction of production return_type -> DOUBLE_COLON ty 
## In state 181, spurious reduction of production option(return_type) -> return_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_PAREN RIGHT_PAREN DOUBLE_COLON WILDCARD 
##
## Ends in an error in state: 179.
##
## return_type -> DOUBLE_COLON . ty [ IF EQ ]
##
## The known suffix of the stack is as follows:
## DOUBLE_COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_PAREN RIGHT_PAREN EQ TRUE WILDCARD 
##
## Ends in an error in state: 280.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LAMBDA option(type_params) params option(return_type) EQ expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) params option(return_type) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_PAREN RIGHT_PAREN EQ WILDCARD 
##
## Ends in an error in state: 183.
##
## expr -> LAMBDA option(type_params) params option(return_type) EQ . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) params option(return_type) EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_PAREN RIGHT_PAREN WILDCARD 
##
## Ends in an error in state: 178.
##
## expr -> LAMBDA option(type_params) params . option(return_type) EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) params 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_PAREN VAL 
##
## Ends in an error in state: 175.
##
## params -> LEFT_PAREN . loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PAREN [ IF EQ DOUBLE_COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA LEFT_PAREN WILDCARD RIGHT_BRACK 
##
## Ends in an error in state: 176.
##
## params -> LEFT_PAREN loption(separated_nonempty_list(COMMA,pattern)) . RIGHT_PAREN [ IF EQ DOUBLE_COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN loption(separated_nonempty_list(COMMA,pattern)) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production separated_nonempty_list(COMMA,pattern) -> pattern 
## In state 20, spurious reduction of production loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LAMBDA WILDCARD 
##
## Ends in an error in state: 173.
##
## expr -> LAMBDA . option(type_params) params option(return_type) EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACE IDENT EQ TRUE COMMA WILDCARD 
##
## Ends in an error in state: 282.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT EQ expr COMMA . separated_nonempty_list(COMMA,__anonymous_0) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQ expr COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACE IDENT EQ TRUE WILDCARD 
##
## Ends in an error in state: 281.
##
## expr -> expr . DOT IDENT [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ TOVERRIDE SUB SEMICOLON RIGHT_BRACE POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT EQ expr . [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT EQ expr . COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACE IDENT EQ WILDCARD 
##
## Ends in an error in state: 172.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT EQ . expr [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT EQ . expr COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACE IDENT WILDCARD 
##
## Ends in an error in state: 171.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT . EQ expr [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT . EQ expr COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACE WILDCARD 
##
## Ends in an error in state: 170.
##
## expr -> LEFT_BRACE . loption(separated_nonempty_list(COMMA,__anonymous_0)) RIGHT_BRACE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACK TRUE COMMA WILDCARD 
##
## Ends in an error in state: 272.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RIGHT_PAREN RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## expr COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACK TRUE RIGHT_PAREN 
##
## Ends in an error in state: 287.
##
## expr -> LEFT_BRACK loption(separated_nonempty_list(COMMA,expr)) . RIGHT_BRACK [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK loption(separated_nonempty_list(COMMA,expr)) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 271, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 268, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACK TRUE WILDCARD 
##
## Ends in an error in state: 271.
##
## expr -> expr . DOT IDENT [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN RIGHT_BRACK POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RIGHT_PAREN RIGHT_BRACK ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RIGHT_PAREN RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_BRACK WILDCARD 
##
## Ends in an error in state: 169.
##
## expr -> LEFT_BRACK . loption(separated_nonempty_list(COMMA,expr)) RIGHT_BRACK [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN ADD WILDCARD 
##
## Ends in an error in state: 318.
##
## expr -> LEFT_PAREN ADD . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN ADD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN AND WILDCARD 
##
## Ends in an error in state: 316.
##
## expr -> LEFT_PAREN AND . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN AND 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN ASSIGN WILDCARD 
##
## Ends in an error in state: 314.
##
## expr -> LEFT_PAREN ASSIGN . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN ASSIGN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN COLON WILDCARD 
##
## Ends in an error in state: 312.
##
## expr -> LEFT_PAREN COLON . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN DIV WILDCARD 
##
## Ends in an error in state: 310.
##
## expr -> LEFT_PAREN DIV . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN DIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN EQ WILDCARD 
##
## Ends in an error in state: 308.
##
## expr -> LEFT_PAREN EQ . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN GT WILDCARD 
##
## Ends in an error in state: 306.
##
## expr -> LEFT_PAREN GT . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN GT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN GTE WILDCARD 
##
## Ends in an error in state: 304.
##
## expr -> LEFT_PAREN GTE . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN GTE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN LT WILDCARD 
##
## Ends in an error in state: 302.
##
## expr -> LEFT_PAREN LT . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN LTE WILDCARD 
##
## Ends in an error in state: 300.
##
## expr -> LEFT_PAREN LTE . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN LTE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN MOD WILDCARD 
##
## Ends in an error in state: 298.
##
## expr -> LEFT_PAREN MOD . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN MOD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN MULT WILDCARD 
##
## Ends in an error in state: 296.
##
## expr -> LEFT_PAREN MULT . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN MULT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN NOT_EQ WILDCARD 
##
## Ends in an error in state: 294.
##
## expr -> LEFT_PAREN NOT_EQ . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN NOT_EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN OR WILDCARD 
##
## Ends in an error in state: 292.
##
## expr -> LEFT_PAREN OR . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN OR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN POW WILDCARD 
##
## Ends in an error in state: 290.
##
## expr -> LEFT_PAREN POW . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN POW 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN SUB WILDCARD 
##
## Ends in an error in state: 167.
##
## expr -> LEFT_PAREN SUB . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> SUB . expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN TRUE COMMA TRUE RIGHT_BRACK 
##
## Ends in an error in state: 323.
##
## expr -> LEFT_PAREN expr COMMA separated_nonempty_list(COMMA,expr) . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN expr COMMA separated_nonempty_list(COMMA,expr) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 271, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN TRUE COMMA WILDCARD 
##
## Ends in an error in state: 322.
##
## expr -> LEFT_PAREN expr COMMA . separated_nonempty_list(COMMA,expr) RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN expr COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN TRUE WILDCARD 
##
## Ends in an error in state: 320.
##
## expr -> LEFT_PAREN expr . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN expr . COMMA separated_nonempty_list(COMMA,expr) RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOT IDENT [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LEFT_PAREN WILDCARD 
##
## Ends in an error in state: 166.
##
## expr -> LEFT_PAREN . expr RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . expr COMMA separated_nonempty_list(COMMA,expr) RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . ADD RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . MULT RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . SUB RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . DIV RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . POW RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . MOD RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . LT RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . GT RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . GTE RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . LTE RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . AND RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . OR RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . ASSIGN RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . EQ RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . NOT_EQ RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> LEFT_PAREN . COLON RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NOT WILDCARD 
##
## Ends in an error in state: 165.
##
## expr -> NOT . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUB WILDCARD 
##
## Ends in an error in state: 106.
##
## expr -> SUB . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE ADD TRUE WILDCARD 
##
## Ends in an error in state: 237.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr ADD expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE ADD WILDCARD 
##
## Ends in an error in state: 236.
##
## expr -> expr ADD . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE AND TRUE WILDCARD 
##
## Ends in an error in state: 247.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr AND expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE AND WILDCARD 
##
## Ends in an error in state: 246.
##
## expr -> expr AND . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE ASSIGN TRUE WILDCARD 
##
## Ends in an error in state: 254.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr ASSIGN expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ASSIGN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE ASSIGN WILDCARD 
##
## Ends in an error in state: 253.
##
## expr -> expr ASSIGN . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ASSIGN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE BAR TRUE WILDCARD 
##
## Ends in an error in state: 260.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr BAR expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr BAR expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE BAR WILDCARD 
##
## Ends in an error in state: 259.
##
## expr -> expr BAR . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr BAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE COLON TRUE WILDCARD 
##
## Ends in an error in state: 235.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr COLON expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr COLON expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE COLON WILDCARD 
##
## Ends in an error in state: 234.
##
## expr -> expr COLON . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE DIV TRUE WILDCARD 
##
## Ends in an error in state: 233.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr DIV expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE DIV WILDCARD 
##
## Ends in an error in state: 232.
##
## expr -> expr DIV . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE DOT WILDCARD 
##
## Ends in an error in state: 209.
##
## expr -> expr DOT . IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE DOUBLE_COLON WILDCARD 
##
## Ends in an error in state: 261.
##
## expr -> expr DOUBLE_COLON . ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DOUBLE_COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE EQ TRUE WILDCARD 
##
## Ends in an error in state: 245.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr EQ expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE EQ WILDCARD 
##
## Ends in an error in state: 244.
##
## expr -> expr EQ . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE GT TRUE WILDCARD 
##
## Ends in an error in state: 243.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr GT expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE GT WILDCARD 
##
## Ends in an error in state: 242.
##
## expr -> expr GT . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE GTE TRUE WILDCARD 
##
## Ends in an error in state: 241.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr GTE expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GTE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE GTE WILDCARD 
##
## Ends in an error in state: 240.
##
## expr -> expr GTE . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GTE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LEFT_BRACK IDENT COMMA WILDCARD 
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(COMMA,ty) -> ty COMMA . separated_nonempty_list(COMMA,ty) [ RIGHT_PAREN RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## ty COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LEFT_BRACK IDENT RIGHT_BRACK WILDCARD 
##
## Ends in an error in state: 212.
##
## expr -> expr type_args . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr type_args 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LEFT_BRACK IDENT RIGHT_PAREN 
##
## Ends in an error in state: 42.
##
## type_args -> LEFT_BRACK separated_nonempty_list(COMMA,ty) . RIGHT_BRACK [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK separated_nonempty_list(COMMA,ty) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> IDENT 
## In state 39, spurious reduction of production separated_nonempty_list(COMMA,ty) -> ty 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LEFT_BRACK IDENT VAL 
##
## Ends in an error in state: 39.
##
## separated_nonempty_list(COMMA,ty) -> ty . [ RIGHT_PAREN RIGHT_BRACK ]
## separated_nonempty_list(COMMA,ty) -> ty . COMMA separated_nonempty_list(COMMA,ty) [ RIGHT_PAREN RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## ty 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LEFT_BRACK WILDCARD 
##
## Ends in an error in state: 38.
##
## type_args -> LEFT_BRACK . separated_nonempty_list(COMMA,ty) RIGHT_BRACK [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LEFT_PAREN TRUE RIGHT_BRACK 
##
## Ends in an error in state: 269.
##
## args -> LEFT_PAREN loption(separated_nonempty_list(COMMA,expr)) . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN loption(separated_nonempty_list(COMMA,expr)) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 271, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 268, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LEFT_PAREN WILDCARD 
##
## Ends in an error in state: 194.
##
## args -> LEFT_PAREN . loption(separated_nonempty_list(COMMA,expr)) RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LESS LESS TRUE WILDCARD 
##
## Ends in an error in state: 258.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr LESS option(pattern) LESS expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LESS option(pattern) LESS expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LESS LESS WILDCARD 
##
## Ends in an error in state: 257.
##
## expr -> expr LESS option(pattern) LESS . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LESS option(pattern) LESS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LESS VAL 
##
## Ends in an error in state: 255.
##
## expr -> expr LESS . option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LESS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LESS WILDCARD MORE 
##
## Ends in an error in state: 256.
##
## expr -> expr LESS option(pattern) . LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LESS option(pattern) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 249, spurious reduction of production option(pattern) -> pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LT TRUE WILDCARD 
##
## Ends in an error in state: 239.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr LT expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LT WILDCARD 
##
## Ends in an error in state: 238.
##
## expr -> expr LT . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LTE TRUE WILDCARD 
##
## Ends in an error in state: 231.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr LTE expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LTE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE LTE WILDCARD 
##
## Ends in an error in state: 230.
##
## expr -> expr LTE . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LTE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MOD TRUE WILDCARD 
##
## Ends in an error in state: 229.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr MOD expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MOD WILDCARD 
##
## Ends in an error in state: 228.
##
## expr -> expr MOD . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MORE MORE TRUE WILDCARD 
##
## Ends in an error in state: 252.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr MORE option(pattern) MORE expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MORE option(pattern) MORE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MORE MORE WILDCARD 
##
## Ends in an error in state: 251.
##
## expr -> expr MORE option(pattern) MORE . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MORE option(pattern) MORE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MORE VAL 
##
## Ends in an error in state: 248.
##
## expr -> expr MORE . option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MORE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MORE WILDCARD LESS 
##
## Ends in an error in state: 250.
##
## expr -> expr MORE option(pattern) . MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MORE option(pattern) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 249, spurious reduction of production option(pattern) -> pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MORE WILDCARD WILDCARD 
##
## Ends in an error in state: 249.
##
## option(pattern) -> pattern . [ MORE LESS ]
## pattern -> pattern . COLON pattern [ MORE LESS DOUBLE_COLON COLON AS ]
## pattern -> pattern . AS IDENT [ MORE LESS DOUBLE_COLON COLON AS ]
## pattern -> pattern . DOUBLE_COLON ty [ MORE LESS DOUBLE_COLON COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MULT TRUE WILDCARD 
##
## Ends in an error in state: 226.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr MULT expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MULT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE MULT WILDCARD 
##
## Ends in an error in state: 225.
##
## expr -> expr MULT . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MULT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE NOT_EQ TRUE WILDCARD 
##
## Ends in an error in state: 224.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr NOT_EQ expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NOT_EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE NOT_EQ WILDCARD 
##
## Ends in an error in state: 223.
##
## expr -> expr NOT_EQ . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NOT_EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE OR TRUE WILDCARD 
##
## Ends in an error in state: 222.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr OR expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE OR WILDCARD 
##
## Ends in an error in state: 221.
##
## expr -> expr OR . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE POW TRUE WILDCARD 
##
## Ends in an error in state: 208.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr POW expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr POW expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE POW WILDCARD 
##
## Ends in an error in state: 207.
##
## expr -> expr POW . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr POW 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE SEMICOLON TRUE WILDCARD 
##
## Ends in an error in state: 220.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr SEMICOLON expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE SEMICOLON WILDCARD 
##
## Ends in an error in state: 219.
##
## expr -> expr SEMICOLON . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE SUB TRUE WILDCARD 
##
## Ends in an error in state: 206.
##
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr SUB expr . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE SUB WILDCARD 
##
## Ends in an error in state: 205.
##
## expr -> expr SUB . expr [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE IDENT WILDCARD 
##
## Ends in an error in state: 37.
##
## ty -> IDENT . [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
## ty -> IDENT . type_args [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LAMBDA LEFT_BRACK IDENT RIGHT_BRACK WILDCARD 
##
## Ends in an error in state: 35.
##
## ty -> LAMBDA option(type_params) . arg_types DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LAMBDA LEFT_PAREN RIGHT_PAREN DOUBLE_COLON WILDCARD 
##
## Ends in an error in state: 49.
##
## ty -> LAMBDA option(type_params) arg_types DOUBLE_COLON . ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) arg_types DOUBLE_COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LAMBDA LEFT_PAREN RIGHT_PAREN WILDCARD 
##
## Ends in an error in state: 48.
##
## ty -> LAMBDA option(type_params) arg_types . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA option(type_params) arg_types 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LAMBDA WILDCARD 
##
## Ends in an error in state: 27.
##
## ty -> LAMBDA . option(type_params) arg_types DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LAMBDA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LEFT_BRACE IDENT DOUBLE_COLON IDENT COMMA WILDCARD 
##
## Ends in an error in state: 52.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> IDENT DOUBLE_COLON ty COMMA . separated_nonempty_list(COMMA,__anonymous_2) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT DOUBLE_COLON ty COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LEFT_BRACE IDENT DOUBLE_COLON IDENT VAL 
##
## Ends in an error in state: 51.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> IDENT DOUBLE_COLON ty . [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_2) -> IDENT DOUBLE_COLON ty . COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT DOUBLE_COLON ty 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LEFT_BRACE IDENT DOUBLE_COLON WILDCARD 
##
## Ends in an error in state: 26.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> IDENT DOUBLE_COLON . ty [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_2) -> IDENT DOUBLE_COLON . ty COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT DOUBLE_COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LEFT_BRACE IDENT WILDCARD 
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> IDENT . DOUBLE_COLON ty [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_2) -> IDENT . DOUBLE_COLON ty COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LEFT_BRACE WILDCARD 
##
## Ends in an error in state: 24.
##
## ty -> LEFT_BRACE . loption(separated_nonempty_list(COMMA,__anonymous_2)) RIGHT_BRACE [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LEFT_PAREN IDENT RIGHT_BRACK 
##
## Ends in an error in state: 57.
##
## ty -> LEFT_PAREN separated_nonempty_list(COMMA,ty) . RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN separated_nonempty_list(COMMA,ty) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> IDENT 
## In state 39, spurious reduction of production separated_nonempty_list(COMMA,ty) -> ty 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE LEFT_PAREN WILDCARD 
##
## Ends in an error in state: 23.
##
## ty -> LEFT_PAREN . separated_nonempty_list(COMMA,ty) RIGHT_PAREN [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AS AND ADD ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE TOVERRIDE WILDCARD 
##
## Ends in an error in state: 203.
##
## expr -> expr TOVERRIDE . ty [ VAL TYPE TRUE TOVERRIDE THEN SUB STRING STOP SIGNAL SIG SEMICOLON RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF ELSE DOUBLE_COLON DOT DIV DEREFERENCE DEF COMMA COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## expr TOVERRIDE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRUE WILDCARD 
##
## Ends in an error in state: 335.
##
## expr -> expr . DOT IDENT [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ TOVERRIDE SUB SEMICOLON POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## prog -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr 
##

Ill-formed expression. Operator is expected

prog: WILDCARD 
##
## Ends in an error in state: 332.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
## 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_BRACK IDENT RIGHT_BRACK WILDCARD 
##
## Ends in an error in state: 197.
##
## decl -> DEF ident_or_op option(type_params) . params option(return_type) option(guard) EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ident_or_op option(type_params) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN DOUBLE_COLON IDENT VAL 
##
## Ends in an error in state: 199.
##
## decl -> DEF ident_or_op option(type_params) params option(return_type) . option(guard) EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ident_or_op option(type_params) params option(return_type) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> IDENT 
## In state 180, spurious reduction of production return_type -> DOUBLE_COLON ty 
## In state 181, spurious reduction of production option(return_type) -> return_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN EQ TRUE WILDCARD 
##
## Ends in an error in state: 266.
##
## decl -> DEF ident_or_op option(type_params) params option(return_type) option(guard) EQ expr . [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## DEF ident_or_op option(type_params) params option(return_type) option(guard) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN EQ WILDCARD 
##
## Ends in an error in state: 265.
##
## decl -> DEF ident_or_op option(type_params) params option(return_type) option(guard) EQ . expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ident_or_op option(type_params) params option(return_type) option(guard) EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN IF LEFT_PAREN FALSE RIGHT_PAREN EOF 
##
## Ends in an error in state: 264.
##
## decl -> DEF ident_or_op option(type_params) params option(return_type) option(guard) . EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ident_or_op option(type_params) params option(return_type) option(guard) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN IF LEFT_PAREN TRUE WILDCARD 
##
## Ends in an error in state: 202.
##
## expr -> expr . DOT IDENT [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ TOVERRIDE SUB SEMICOLON RIGHT_PAREN POW OR NOT_EQ MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK GTE GT EQ DOUBLE_COLON DOT DIV DEREFERENCE COLON BAR ASSIGN AND ADD ]
## guard -> IF LEFT_PAREN expr . RIGHT_PAREN [ EQ ]
##
## The known suffix of the stack is as follows:
## IF LEFT_PAREN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN IF LEFT_PAREN WILDCARD 
##
## Ends in an error in state: 201.
##
## guard -> IF LEFT_PAREN . expr RIGHT_PAREN [ EQ ]
##
## The known suffix of the stack is as follows:
## IF LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN IF WILDCARD 
##
## Ends in an error in state: 200.
##
## guard -> IF . LEFT_PAREN expr RIGHT_PAREN [ EQ ]
##
## The known suffix of the stack is as follows:
## IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT LEFT_PAREN RIGHT_PAREN WILDCARD 
##
## Ends in an error in state: 198.
##
## decl -> DEF ident_or_op option(type_params) params . option(return_type) option(guard) EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ident_or_op option(type_params) params 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF IDENT WILDCARD 
##
## Ends in an error in state: 196.
##
## decl -> DEF ident_or_op . option(type_params) params option(return_type) option(guard) EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ident_or_op 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN ADD WILDCARD 
##
## Ends in an error in state: 156.
##
## ident_or_op -> LEFT_PAREN ADD . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN ADD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN AND WILDCARD 
##
## Ends in an error in state: 154.
##
## ident_or_op -> LEFT_PAREN AND . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN AND 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN ASSIGN WILDCARD 
##
## Ends in an error in state: 152.
##
## ident_or_op -> LEFT_PAREN ASSIGN . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN ASSIGN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN COLON WILDCARD 
##
## Ends in an error in state: 150.
##
## ident_or_op -> LEFT_PAREN COLON . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN DEREFERENCE WILDCARD 
##
## Ends in an error in state: 148.
##
## ident_or_op -> LEFT_PAREN DEREFERENCE . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN DEREFERENCE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN DIV WILDCARD 
##
## Ends in an error in state: 146.
##
## ident_or_op -> LEFT_PAREN DIV . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN DIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN EQ WILDCARD 
##
## Ends in an error in state: 144.
##
## ident_or_op -> LEFT_PAREN EQ . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN GT WILDCARD 
##
## Ends in an error in state: 142.
##
## ident_or_op -> LEFT_PAREN GT . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN GT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN GTE WILDCARD 
##
## Ends in an error in state: 140.
##
## ident_or_op -> LEFT_PAREN GTE . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN GTE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN LT WILDCARD 
##
## Ends in an error in state: 138.
##
## ident_or_op -> LEFT_PAREN LT . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN LTE WILDCARD 
##
## Ends in an error in state: 136.
##
## ident_or_op -> LEFT_PAREN LTE . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN LTE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN MOD WILDCARD 
##
## Ends in an error in state: 134.
##
## ident_or_op -> LEFT_PAREN MOD . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN MOD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN MULT WILDCARD 
##
## Ends in an error in state: 132.
##
## ident_or_op -> LEFT_PAREN MULT . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN MULT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN NOT WILDCARD 
##
## Ends in an error in state: 130.
##
## ident_or_op -> LEFT_PAREN NOT . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN NOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN NOT_EQ WILDCARD 
##
## Ends in an error in state: 128.
##
## ident_or_op -> LEFT_PAREN NOT_EQ . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN NOT_EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN OR WILDCARD 
##
## Ends in an error in state: 126.
##
## ident_or_op -> LEFT_PAREN OR . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN OR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN POW WILDCARD 
##
## Ends in an error in state: 124.
##
## ident_or_op -> LEFT_PAREN POW . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN POW 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN SUB WILDCARD 
##
## Ends in an error in state: 122.
##
## ident_or_op -> LEFT_PAREN SUB . RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF LEFT_PAREN WILDCARD 
##
## Ends in an error in state: 121.
##
## ident_or_op -> LEFT_PAREN . ADD RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . MULT RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . SUB RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . DIV RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . POW RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . MOD RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . LT RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . GT RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . GTE RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . LTE RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . AND RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . OR RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . ASSIGN RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . EQ RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . NOT_EQ RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . COLON RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . NOT RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
## ident_or_op -> LEFT_PAREN . DEREFERENCE RIGHT_PAREN [ RIGHT_PAREN LEFT_PAREN LEFT_BRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: DEF WILDCARD 
##
## Ends in an error in state: 195.
##
## decl -> DEF . ident_or_op option(type_params) params option(return_type) option(guard) EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: IMPORT IDENT IDENT EQ WILDCARD 
##
## Ends in an error in state: 189.
##
## decl -> IMPORT IDENT IDENT EQ . STRING [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## IMPORT IDENT IDENT EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: IMPORT IDENT IDENT WILDCARD 
##
## Ends in an error in state: 188.
##
## decl -> IMPORT IDENT IDENT . EQ STRING [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## IMPORT IDENT IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: IMPORT IDENT WILDCARD 
##
## Ends in an error in state: 187.
##
## decl -> IMPORT IDENT . IDENT EQ STRING [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## IMPORT IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: IMPORT WILDCARD 
##
## Ends in an error in state: 186.
##
## decl -> IMPORT . IDENT IDENT EQ STRING [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## IMPORT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: INCLUDE STRING WILDCARD 
##
## Ends in an error in state: 330.
##
## list(decl) -> decl . list(decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## decl 
##

# TODO

Declaration (def ...) is expected

orc_module: INCLUDE WILDCARD 
##
## Ends in an error in state: 184.
##
## decl -> INCLUDE . STRING [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## INCLUDE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: REFER IDENT DOT WILDCARD 
##
## Ends in an error in state: 116.
##
## separated_nonempty_list(DOT,IDENT) -> IDENT DOT . separated_nonempty_list(DOT,IDENT) [ LEFT_PAREN ]
##
## The known suffix of the stack is as follows:
## IDENT DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: REFER IDENT LEFT_PAREN IDENT COMMA WILDCARD 
##
## Ends in an error in state: 163.
##
## separated_nonempty_list(COMMA,ident_or_op) -> ident_or_op COMMA . separated_nonempty_list(COMMA,ident_or_op) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ident_or_op COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: REFER IDENT LEFT_PAREN IDENT WILDCARD 
##
## Ends in an error in state: 162.
##
## separated_nonempty_list(COMMA,ident_or_op) -> ident_or_op . [ RIGHT_PAREN ]
## separated_nonempty_list(COMMA,ident_or_op) -> ident_or_op . COMMA separated_nonempty_list(COMMA,ident_or_op) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ident_or_op 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: REFER IDENT LEFT_PAREN WILDCARD 
##
## Ends in an error in state: 120.
##
## decl -> REFER mod_name LEFT_PAREN . loption(separated_nonempty_list(COMMA,ident_or_op)) RIGHT_PAREN [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## REFER mod_name LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: REFER IDENT WILDCARD 
##
## Ends in an error in state: 115.
##
## separated_nonempty_list(DOT,IDENT) -> IDENT . [ LEFT_PAREN ]
## separated_nonempty_list(DOT,IDENT) -> IDENT . DOT separated_nonempty_list(DOT,IDENT) [ LEFT_PAREN ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: REFER WILDCARD 
##
## Ends in an error in state: 114.
##
## decl -> REFER . mod_name LEFT_PAREN loption(separated_nonempty_list(COMMA,ident_or_op)) RIGHT_PAREN [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## REFER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: SIG IDENT LEFT_BRACK IDENT RIGHT_BRACK WILDCARD 
##
## Ends in an error in state: 110.
##
## decl -> SIG IDENT option(type_params) . arg_types DOUBLE_COLON ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## SIG IDENT option(type_params) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: SIG IDENT LEFT_PAREN IDENT RIGHT_BRACK 
##
## Ends in an error in state: 46.
##
## arg_types -> LEFT_PAREN loption(separated_nonempty_list(COMMA,ty)) . RIGHT_PAREN [ DOUBLE_COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN loption(separated_nonempty_list(COMMA,ty)) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> IDENT 
## In state 39, spurious reduction of production separated_nonempty_list(COMMA,ty) -> ty 
## In state 45, spurious reduction of production loption(separated_nonempty_list(COMMA,ty)) -> separated_nonempty_list(COMMA,ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: SIG IDENT LEFT_PAREN RIGHT_PAREN DOUBLE_COLON WILDCARD 
##
## Ends in an error in state: 112.
##
## decl -> SIG IDENT option(type_params) arg_types DOUBLE_COLON . ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## SIG IDENT option(type_params) arg_types DOUBLE_COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: SIG IDENT LEFT_PAREN RIGHT_PAREN WILDCARD 
##
## Ends in an error in state: 111.
##
## decl -> SIG IDENT option(type_params) arg_types . DOUBLE_COLON ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## SIG IDENT option(type_params) arg_types 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: SIG IDENT LEFT_PAREN WILDCARD 
##
## Ends in an error in state: 36.
##
## arg_types -> LEFT_PAREN . loption(separated_nonempty_list(COMMA,ty)) RIGHT_PAREN [ DOUBLE_COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: SIG IDENT WILDCARD 
##
## Ends in an error in state: 109.
##
## decl -> SIG IDENT . option(type_params) arg_types DOUBLE_COLON ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## SIG IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: SIG WILDCARD 
##
## Ends in an error in state: 108.
##
## decl -> SIG . IDENT option(type_params) arg_types DOUBLE_COLON ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## SIG 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ BAR IDENT WILDCARD 
##
## Ends in an error in state: 99.
##
## constructor -> IDENT . LEFT_PAREN loption(separated_nonempty_list(COMMA,slot)) RIGHT_PAREN [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF BAR ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ BAR WILDCARD 
##
## Ends in an error in state: 98.
##
## constructors -> BAR . constructor [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF BAR ]
##
## The known suffix of the stack is as follows:
## BAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ IDENT LEFT_PAREN RIGHT_PAREN BAR WILDCARD 
##
## Ends in an error in state: 103.
##
## constructors -> constructors BAR . constructor [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF BAR ]
##
## The known suffix of the stack is as follows:
## constructors BAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ IDENT LEFT_PAREN RIGHT_PAREN WILDCARD 
##
## Ends in an error in state: 102.
##
## constructors -> constructors . BAR constructor [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF BAR ]
## decl -> TYPE IDENT option(type_params) EQ constructors . [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT option(type_params) EQ constructors 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ IDENT LEFT_PAREN VAL 
##
## Ends in an error in state: 89.
##
## constructor -> IDENT LEFT_PAREN . loption(separated_nonempty_list(COMMA,slot)) RIGHT_PAREN [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF BAR ]
##
## The known suffix of the stack is as follows:
## IDENT LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ IDENT LEFT_PAREN WILDCARD COMMA VAL 
##
## Ends in an error in state: 93.
##
## separated_nonempty_list(COMMA,slot) -> slot COMMA . separated_nonempty_list(COMMA,slot) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## slot COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ IDENT LEFT_PAREN WILDCARD WILDCARD 
##
## Ends in an error in state: 92.
##
## separated_nonempty_list(COMMA,slot) -> slot . [ RIGHT_PAREN ]
## separated_nonempty_list(COMMA,slot) -> slot . COMMA separated_nonempty_list(COMMA,slot) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## slot 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ IDENT WILDCARD 
##
## Ends in an error in state: 88.
##
## constructor -> IDENT . LEFT_PAREN loption(separated_nonempty_list(COMMA,slot)) RIGHT_PAREN [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF BAR ]
## ty -> IDENT . [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## ty -> IDENT . type_args [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT EQ WILDCARD 
##
## Ends in an error in state: 87.
##
## decl -> TYPE IDENT option(type_params) EQ . ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## decl -> TYPE IDENT option(type_params) EQ . constructors [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT option(type_params) EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT LEFT_BRACK IDENT RIGHT_BRACK EOF 
##
## Ends in an error in state: 86.
##
## decl -> TYPE IDENT option(type_params) . EQ ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## decl -> TYPE IDENT option(type_params) . EQ constructors [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT option(type_params) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE IDENT WILDCARD 
##
## Ends in an error in state: 85.
##
## decl -> TYPE IDENT . option(type_params) EQ ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## decl -> TYPE IDENT . option(type_params) EQ constructors [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: TYPE WILDCARD 
##
## Ends in an error in state: 84.
##
## decl -> TYPE . IDENT option(type_params) EQ ty [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## decl -> TYPE . IDENT option(type_params) EQ constructors [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## TYPE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL IDENT LEFT_PAREN VAL 
##
## Ends in an error in state: 17.
##
## pattern -> IDENT LEFT_PAREN . loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## IDENT LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL IDENT LEFT_PAREN WILDCARD RIGHT_BRACK 
##
## Ends in an error in state: 67.
##
## pattern -> IDENT LEFT_PAREN loption(separated_nonempty_list(COMMA,pattern)) . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## IDENT LEFT_PAREN loption(separated_nonempty_list(COMMA,pattern)) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production separated_nonempty_list(COMMA,pattern) -> pattern 
## In state 20, spurious reduction of production loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL IDENT WILDCARD 
##
## Ends in an error in state: 16.
##
## pattern -> IDENT . [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> IDENT . LEFT_PAREN loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACE IDENT EQ VAL 
##
## Ends in an error in state: 14.
##
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT EQ . pattern [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT EQ . pattern COMMA separated_nonempty_list(COMMA,__anonymous_1) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACE IDENT EQ WILDCARD COMMA WILDCARD 
##
## Ends in an error in state: 70.
##
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT EQ pattern COMMA . separated_nonempty_list(COMMA,__anonymous_1) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQ pattern COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACE IDENT EQ WILDCARD WILDCARD 
##
## Ends in an error in state: 69.
##
## pattern -> pattern . COLON pattern [ RIGHT_BRACE DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . AS IDENT [ RIGHT_BRACE DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . DOUBLE_COLON ty [ RIGHT_BRACE DOUBLE_COLON COMMA COLON AS ]
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT EQ pattern . [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT EQ pattern . COMMA separated_nonempty_list(COMMA,__anonymous_1) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQ pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACE IDENT WILDCARD 
##
## Ends in an error in state: 13.
##
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT . EQ pattern [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT . EQ pattern COMMA separated_nonempty_list(COMMA,__anonymous_1) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## IDENT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACE WILDCARD 
##
## Ends in an error in state: 12.
##
## pattern -> LEFT_BRACE . loption(separated_nonempty_list(COMMA,__anonymous_1)) RIGHT_BRACE [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACK VAL 
##
## Ends in an error in state: 11.
##
## pattern -> LEFT_BRACK . loption(separated_nonempty_list(COMMA,pattern)) RIGHT_BRACK [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACK WILDCARD COMMA VAL 
##
## Ends in an error in state: 60.
##
## separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RIGHT_PAREN RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## pattern COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACK WILDCARD RIGHT_PAREN 
##
## Ends in an error in state: 75.
##
## pattern -> LEFT_BRACK loption(separated_nonempty_list(COMMA,pattern)) . RIGHT_BRACK [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK loption(separated_nonempty_list(COMMA,pattern)) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production separated_nonempty_list(COMMA,pattern) -> pattern 
## In state 20, spurious reduction of production loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_BRACK WILDCARD WILDCARD 
##
## Ends in an error in state: 21.
##
## pattern -> pattern . COLON pattern [ RIGHT_PAREN RIGHT_BRACK DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . AS IDENT [ RIGHT_PAREN RIGHT_BRACK DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . DOUBLE_COLON ty [ RIGHT_PAREN RIGHT_BRACK DOUBLE_COLON COMMA COLON AS ]
## separated_nonempty_list(COMMA,pattern) -> pattern . [ RIGHT_PAREN RIGHT_BRACK ]
## separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RIGHT_PAREN RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_PAREN VAL 
##
## Ends in an error in state: 10.
##
## pattern -> LEFT_PAREN . pattern COMMA loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> LEFT_PAREN . pattern RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_PAREN WILDCARD COMMA VAL 
##
## Ends in an error in state: 79.
##
## pattern -> LEFT_PAREN pattern COMMA . loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN pattern COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_PAREN WILDCARD COMMA WILDCARD RIGHT_BRACK 
##
## Ends in an error in state: 80.
##
## pattern -> LEFT_PAREN pattern COMMA loption(separated_nonempty_list(COMMA,pattern)) . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN pattern COMMA loption(separated_nonempty_list(COMMA,pattern)) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production separated_nonempty_list(COMMA,pattern) -> pattern 
## In state 20, spurious reduction of production loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL LEFT_PAREN WILDCARD WILDCARD 
##
## Ends in an error in state: 77.
##
## pattern -> LEFT_PAREN pattern . COMMA loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . COLON pattern [ RIGHT_PAREN DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . AS IDENT [ RIGHT_PAREN DOUBLE_COLON COMMA COLON AS ]
## pattern -> LEFT_PAREN pattern . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . DOUBLE_COLON ty [ RIGHT_PAREN DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL SUB WILDCARD 
##
## Ends in an error in state: 4.
##
## pattern -> SUB . INT [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> SUB . FLOAT [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL VAL 
##
## Ends in an error in state: 1.
##
## decl -> VAL . pattern EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## VAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL WILDCARD AS WILDCARD 
##
## Ends in an error in state: 65.
##
## pattern -> pattern AS . IDENT [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern AS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL WILDCARD COLON VAL 
##
## Ends in an error in state: 63.
##
## pattern -> pattern COLON . pattern [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL WILDCARD COLON WILDCARD WILDCARD 
##
## Ends in an error in state: 64.
##
## pattern -> pattern . COLON pattern [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern COLON pattern . [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . AS IDENT [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
## pattern -> pattern . DOUBLE_COLON ty [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern COLON pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL WILDCARD DOUBLE_COLON WILDCARD 
##
## Ends in an error in state: 22.
##
## pattern -> pattern DOUBLE_COLON . ty [ RIGHT_PAREN RIGHT_BRACK RIGHT_BRACE MORE LESS EQ DOUBLE_COLON COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern DOUBLE_COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL WILDCARD EQ TRUE WILDCARD 
##
## Ends in an error in state: 326.
##
## decl -> VAL pattern EQ expr . [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## expr -> expr . DOT IDENT [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . DEREFERENCE [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . ADD expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . MULT expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . SUB expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . DIV expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . POW expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . MOD expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . LT expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . GT expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . GTE expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . LTE expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . AND expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . OR expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . ASSIGN expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . EQ expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . NOT_EQ expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . COLON expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . args [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . type_args args [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . BAR expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . SEMICOLON expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . LESS option(pattern) LESS expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . MORE option(pattern) MORE expr [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . DOUBLE_COLON ty [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
## expr -> expr . TOVERRIDE ty [ VAL TYPE TRUE TOVERRIDE SUB STRING STOP SIGNAL SIG SEMICOLON REFER POW OR NUMBER_SIGN NULL NOT_EQ NOT MULT MORE MOD LTE LT LESS LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT GTE GT FLOAT FFC FALSE EQ EOF DOUBLE_COLON DOT DIV DEREFERENCE DEF COLON BAR ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## VAL pattern EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL WILDCARD EQ WILDCARD 
##
## Ends in an error in state: 83.
##
## decl -> VAL pattern EQ . expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
##
## The known suffix of the stack is as follows:
## VAL pattern EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: VAL WILDCARD WILDCARD 
##
## Ends in an error in state: 82.
##
## decl -> VAL pattern . EQ expr [ VAL TYPE TRUE SUB STRING STOP SIGNAL SIG REFER NUMBER_SIGN NULL NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE LAMBDA INT INCLUDE IMPORT IF IDENT FLOAT FFC FALSE EOF DEF ]
## pattern -> pattern . COLON pattern [ EQ DOUBLE_COLON COLON AS ]
## pattern -> pattern . AS IDENT [ EQ DOUBLE_COLON COLON AS ]
## pattern -> pattern . DOUBLE_COLON ty [ EQ DOUBLE_COLON COLON AS ]
##
## The known suffix of the stack is as follows:
## VAL pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

orc_module: WILDCARD 
##
## Ends in an error in state: 0.
##
## orc_module' -> . orc_module [ # ]
##
## The known suffix of the stack is as follows:
## 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

